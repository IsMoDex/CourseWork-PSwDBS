-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.
--TransportCargo_to_MTC
--BEGIN;

-- Удаление всех объектов базы данных
DROP SCHEMA public CASCADE;
CREATE SCHEMA public;

CREATE OR REPLACE FUNCTION start_sql(path_to_file TEXT)
RETURNS VOID AS $$
DECLARE
    sql_script TEXT;
BEGIN
    -- Читаем содержимое файла
	sql_script := pg_read_file(path_to_file);
    -- Выполняем SQL скрипт
	EXECUTE sql_script;
END $$ LANGUAGE plpgsql;

-- DROP TABLE IF EXISTS public.cities,
-- public.urban_areas,
-- public.types_of_ownership,
-- public.atc,
-- public.users,
-- public.driving_categories,
-- public.drivers,
-- public.cargo,
-- public.car_brands,
-- public.cars,
-- public.transportation_table
-- CASCADE;

CREATE TABLE IF NOT EXISTS public.cities
(
    id bigserial PRIMARY KEY,
    name text NOT NULL UNIQUE
);

CREATE TABLE IF NOT EXISTS public.urban_areas
(
    id bigserial PRIMARY KEY,
    name text NOT NULL,
    id_city bigint NOT NULL,
    UNIQUE(name, id_city)
);

CREATE TABLE IF NOT EXISTS public.types_of_ownership
(
    id serial PRIMARY KEY,
    name text NOT NULL UNIQUE
);

CREATE TABLE IF NOT EXISTS public.users 
(
    login text PRIMARY KEY,
    first_name character varying(32) NOT NULL,
    name character varying(32) NOT NULL,
    last_name character varying(32) NOT NULL,
    data JSONB
);

-- Создаем домен для номера телефона
CREATE OR REPLACE DOMAIN phone_domain AS bigint
CHECK (VALUE >= 1 AND VALUE <= 99999999999);

CREATE TABLE IF NOT EXISTS public.atc
(
    id bigserial PRIMARY KEY,
    name text NOT NULL,
    id_urban_area bigint NOT NULL,
    id_type_of_ownership integer NOT NULL,
    year integer NOT NULL, --CHECK (year <= EXTRACT(YEAR FROM CURRENT_DATE)),
    phone phone_domain NOT NULL UNIQUE,
    user_owner text NOT NULL DEFAULT CURRENT_USER UNIQUE
);

CREATE TABLE IF NOT EXISTS public.driving_categories
(
    id serial PRIMARY KEY,
    name character varying(6) NOT NULL
);

CREATE TABLE IF NOT EXISTS public.drivers 
(
    id bigserial PRIMARY KEY,
    first_name character varying(32) NOT NULL,
    name character varying(32) NOT NULL,
    last_name character varying(32) NOT NULL,
    date_of_birth date NOT NULL,
    start_date date NOT NULL,
    id_owning_atc bigint NOT NULL,
    id_driving_category integer NOT NULL,
    salary integer NOT NULL
);

CREATE TABLE IF NOT EXISTS public.cargo
(
    id bigserial PRIMARY KEY,
    name text NOT NULL,
    weight integer NOT NULL
);

CREATE TABLE IF NOT EXISTS public.car_brands
(
    id bigserial PRIMARY KEY,
    name text NOT NULL,
    load_capacity integer NOT NULL,
    fuel_consumption integer NOT NULL
);

CREATE TABLE IF NOT EXISTS public.cars
(
    id bigserial PRIMARY KEY,
    license_plate character varying(15) NOT NULL UNIQUE,
    id_owning_atc bigint NOT NULL,
    id_car_brand bigint NOT NULL
);

CREATE TABLE IF NOT EXISTS public.transportation_table
(
    id bigserial PRIMARY KEY,
    id_cargo bigint NOT NULL,
    number_of_units integer NOT NULL,
    id_city_departure bigint NOT NULL, --Город отбытия
    id_city_arrival bigint NOT NULL,   --Город прибытия
    departure_date date NOT NULL, --Дата отбытия
    arrival_date date,   --Дата прибытия
    cost_of_transportation_table integer NOT NULL,
    id_car bigint NOT NULL,
    id_driver bigint NOT NULL
);

ALTER TABLE IF EXISTS public.urban_areas
    ADD CONSTRAINT id_city FOREIGN KEY (id_city)
    REFERENCES public.cities (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE
    NOT VALID;

ALTER TABLE IF EXISTS public.atc
    ADD CONSTRAINT id_urban_area FOREIGN KEY (id_urban_area)
    REFERENCES public.urban_areas (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE
    NOT VALID,
    ADD CONSTRAINT id_type_of_ownership FOREIGN KEY (id_type_of_ownership)
    REFERENCES public.types_of_ownership (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE
    NOT VALID,
    ADD CONSTRAINT unique_user_owner UNIQUE (user_owner),
    ADD CONSTRAINT user_owner FOREIGN KEY (user_owner) --Связь 1 к 1
    REFERENCES public.users (login) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE
    NOT VALID,
    ENABLE ROW LEVEL SECURITY;

ALTER TABLE IF EXISTS public.drivers
    ADD CONSTRAINT id_owning_atc FOREIGN KEY (id_owning_atc)
    REFERENCES public.atc (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE
    NOT VALID,
    ADD CONSTRAINT id_driving_category FOREIGN KEY (id_driving_category)
    REFERENCES public.driving_categories (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE
    NOT VALID,
    ENABLE ROW LEVEL SECURITY;

ALTER TABLE IF EXISTS public.cars
    ADD CONSTRAINT id_owning_atc FOREIGN KEY (id_owning_atc)
    REFERENCES public.atc (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE
    NOT VALID,
    ADD CONSTRAINT id_car_brand FOREIGN KEY (id_car_brand)
    REFERENCES public.car_brands (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE
    NOT VALID,
    ENABLE ROW LEVEL SECURITY;

ALTER TABLE IF EXISTS public.transportation_table
    ADD CONSTRAINT id_cargo FOREIGN KEY (id_cargo)
    REFERENCES public.cargo (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE
    NOT VALID,
    ADD CONSTRAINT id_city_departure FOREIGN KEY (id_city_departure)
    REFERENCES public.cities (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE
    NOT VALID,
    ADD CONSTRAINT id_city_arrival FOREIGN KEY (id_city_arrival)
    REFERENCES public.cities (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE
    NOT VALID,
    ADD CONSTRAINT id_car FOREIGN KEY (id_car)
    REFERENCES public.cars (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE
    NOT VALID,
    ADD CONSTRAINT id_driver FOREIGN KEY (id_driver)
    REFERENCES public.drivers (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE
    NOT VALID,
    ENABLE ROW LEVEL SECURITY;

--Запускаем остальные SQL скрипты.
DO $$
DECLARE
    path TEXT := 'E:\\PostgreSQL_Scripts\\Sem_VI\\';
BEGIN
    --PERFORM start_sql(path || 'views.sql');
    PERFORM start_sql(path || 'roles.sql');
    PERFORM start_sql(path || 'triggers.sql');
    PERFORM start_sql(path || 'functions.sql');
    PERFORM start_sql(path || 'rls.sql');
END $$;

--END;